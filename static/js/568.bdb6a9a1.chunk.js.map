{"version":3,"file":"static/js/568.bdb6a9a1.chunk.js","mappings":"8LACA,EAA0B,uBAA1B,EAA2D,uB,2BCoD3D,GAxC+BA,EAAAA,EAAAA,KAAS,YAAuC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aACpDC,EAAmBC,SAASC,cAAc,OAC1CC,GAAMC,EAAAA,EAAAA,QAAO,MAuBnB,OAfAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EAEd,OADA,UAAAJ,SAASK,YAAT,SAAeC,OAAOP,GACf,WAAO,IAAD,EACX,UAAAC,SAASK,YAAT,SAAeE,YAAYR,MAE5B,CAACA,KAEJK,EAAAA,EAAAA,YAAU,WAENJ,SAASK,KAAKG,MAAMC,SADlBZ,EAC6B,SAEA,SAEhC,CAACA,KAGF,8BACGA,GACCa,EAAAA,cACE,gBAAKC,UAAWC,EAAiBC,QAzBzB,SAACC,GACXA,EAAEC,SAAWb,EAAIc,SACnBlB,KAuBI,UACE,gBAAKI,IAAKA,EAAKS,UAAWC,EAA1B,SACGhB,MAGLG,QC9CV,EAAyB,sBAAzB,EAAuD,qBAAvD,EAA2F,4BAA3F,EAA8H,oBAA9H,EAAwJ,mBCoDxJ,GApC+BJ,EAAAA,EAAAA,KAC7B,YAA2C,IAAzCsB,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,YACvB,OACE,gCACGD,IAAU,gBAAKR,UAAWC,EAAhB,SAAiCO,KAC5C,iBAAKR,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SACGK,EAAQI,KAAI,SAAAC,GAAM,OACjB,gBAAsBX,UAAWC,EAAjC,SACGU,EAAOC,OADAD,EAAOE,UAKpBN,EAAKG,KAAI,SAACI,EAAIC,GACb,OACE,gBACEf,UAAWC,EAEXC,QAAS,WACPO,EAAYK,EAAGE,KAJnB,SAOGV,EAAQI,KAAI,SAAAC,GAAM,OACjB,gBAAsBX,UAAWC,EAAjC,SACGM,EAAKQ,GAAGJ,EAAOM,UADRN,EAAOE,SANdC,EAAGE,gBCjCxB,EAAuB,mBAAvB,EAAgD,kBAAhD,EAA2E,qBC+B3E,GAlB8BE,EAAAA,EAAAA,OAAK,YAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACnD,OACE,gBAAKrB,UAAWC,EAAhB,SACGmB,EAAKV,KAAI,SAAAY,GAAG,OACX,gBAEEtB,UAAS,UAAKC,EAAL,YACPoB,IAAaC,EAAIN,GAAKf,EAAiB,IAEzCC,QAASmB,IAAaC,EAAIN,GAAK,kBAAMG,EAASG,EAAIN,KAAM,aAL1D,SAOGM,EAAIC,MANAD,EAAIN,YCTnB,EAHmC,SAAC,GAAkC,IAAjC/B,EAAgC,EAAhCA,SAAUuC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UACpD,OAAO,8BAAGA,IAAcD,GAASvC,KCMnC,GAN8CiC,EAAAA,EAAAA,OAAK,YAAwB,IAAtBjC,EAAqB,EAArBA,SAAUuC,EAAW,EAAXA,MACvDE,EAAUC,EAAAA,SAAAA,IAAmB1C,GAAU,SAAA2C,GAC3C,OAAOD,EAAAA,aAAmBC,EAAO,CAACH,UAAWD,OAE/C,OAAO,8BAAGE,O,2DCZCG,EAAU,CACrB,CAACb,GAAI,SAAKO,KAAM,iEAChB,CAACP,GAAI,SAAKO,KAAM,kEAELO,EAAc,CACzB,CACElB,MAAO,OACPC,IAAK,IACLI,QAAS,QAEX,CACEL,MAAO,OACPC,IAAK,IACLI,QAAS,QAEX,CACEL,MAAO,cACPC,IAAK,IACLI,QAAS,cAEX,CACEL,MAAO,iBACPC,IAAK,IACLI,QAAS,kBAyBb,EAdmC,SACjCD,EACAO,EACAQ,EACAC,EACAC,GALiC,MAM7B,CACJjB,GAAAA,EACAO,KAAAA,EACAQ,KAAAA,EACAC,WAAAA,EACAC,cAAAA,I,mBCjCF,EAT2B,CACnBC,UADmB,WACgB,OAAD,qHACfC,IAAAA,IACrB,oDAFoC,cAChCC,EADgC,yBAI/BA,EAASC,MAJsB,+CCkE1C,MAjEMC,WACJ,aAAe,IAAD,4BAadC,WAAY,EAbE,KAedC,eAAiB,EAfH,KAiBdC,WAA2B,GAjBb,KAkDdC,kBAAoB,SAAC1B,GACnB,EAAKwB,eAAiBxB,GAnDV,KAsDd2B,WAAa,SAACnB,GACZ,EAAKe,UAAYf,GAvDL,KA0DdoB,aA1Dc,iBA0DA,oGACMC,EAAAA,YADN,OACNC,EADM,OAEZ,EAAKL,WAAaK,EAFN,4CAzDZC,EAAAA,EAAAA,IAAeC,KAAM,CACnBT,UAAWU,EAAAA,GACXR,WAAYQ,EAAAA,GACZT,eAAgBS,EAAAA,GAChBC,OAAQC,EAAAA,GACR5C,KAAM4C,EAAAA,GACNC,aAAcD,EAAAA,GACdR,WAAYU,EAAAA,GACZX,kBAAmBW,EAAAA,GACnBT,YAAaS,EAAAA,KAsChB,OApCA,4BAOD,WACE,OAAOL,KAAKP,aACb,mBACD,WACE,OAAOO,KAAKR,iBACb,gBAED,WAAY,IAAD,OACT,OAAOc,OAAOC,KAAKP,KAAKE,QAAQxC,KAAI,SAAAG,GAClC,IAAMuC,EAAe,EAAKF,OAAOrC,GACjC,OAAO2C,EACLJ,EAAapC,GACbH,EACAuC,EAAarB,KACbqB,EAAapB,WACboB,EAAanB,oBAGlB,wBAED,WAAoB,IAAD,OACjB,OAAOe,KAAKzC,KAAKkD,MAAK,SAAAC,GAAG,OAAIA,EAAI1C,KAAO,EAAK2C,aAC9C,kBAED,WACE,OAAOX,KAAKzC,KAAKqD,MAAM,GAAIC,KAAKC,MAAMd,KAAKzC,KAAKwD,OAAS,MAC1D,kBACD,WACE,OAAOf,KAAKzC,KAAKqD,MAAMC,KAAKC,MAAMd,KAAKzC,KAAKwD,OAAS,QACtD,EAjDGzB,ICJN,EAA0B,wBCsF1B,GAzEyBtD,EAAAA,EAAAA,KAAS,WAChC,OAAgCgF,EAAAA,EAAAA,UAA0B,UAA1D,eAAO3C,EAAP,KAAiB4C,EAAjB,KAEEtB,EAOEL,EAAAA,WANFM,EAMEN,EAAAA,YALFI,EAKEJ,EAAAA,kBAJF/B,EAIE+B,EAAAA,KAHFc,EAGEd,EAAAA,aAFF4B,EAEE5B,EAAAA,OADF6B,EACE7B,EAAAA,OAEJ,GAAwC0B,EAAAA,EAAAA,WAAS,GAAjD,eAAOI,EAAP,KAAoBC,EAApB,KAEMC,GAAa9E,EAAAA,EAAAA,UACb+E,GAAY/E,EAAAA,EAAAA,SAAO,IACzBC,EAAAA,EAAAA,YAAU,WAUR,OATI8E,EAAUlE,UACZuC,IACA2B,EAAUlE,SAAU,GAEjB+D,EAGHI,cAAcF,EAAWjE,SAFzBiE,EAAWjE,QAAUoE,YAAY7B,EAAa,KAIzC,WACL4B,cAAcF,EAAWjE,YAE1B,CAAC+D,EAAazB,EAAYC,IAE7B,IAAM8B,GAAeC,EAAAA,EAAAA,cACnB,SAAC3D,GACCqD,GAAiB,GACjB3B,EAAkB1B,KAEpB,CAAC0B,IAGH,OACE,UAACkC,EAAA,EAAD,YACE,SAAC,EAAD,CAAO1F,OAAQkF,EAAajF,aAAc,kBAAMkF,GAAiB,IAAjE,UACE,SAACQ,EAAD,CAAYC,MAAO1B,OAErB,SAAC,EAAD,CAAMjC,SAAU8C,EAAa7C,KAAMS,EAASR,SAAUA,KACtD,gBAAKrB,UAAWC,EAAhB,SACIM,EAAKwD,QAGL,UAAC,EAAD,CAAYvC,MAAOH,EAAnB,WACE,SAAC,EAAD,CAAWG,MAAM,SAAjB,UACE,SAAC,EAAD,CACElB,QAASwB,EACTvB,KAAM2D,EACNzD,YAAaiE,EACblE,OAAM,mEAAiBa,EAAjB,WAGV,SAAC,EAAD,CAAWG,MAAM,SAAjB,UACE,SAAC,EAAD,CACElB,QAASwB,EACTvB,KAAM4D,EACN3D,OAAM,mEAAiBa,EAAjB,MACNZ,YAAaiE,UAhBnB,SAACK,EAAA,EAAD,YA+BJF,EAAmC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACzC,OACE,4BACE,kCAAUA,EAAM9D,OAChB,oCAAY8D,EAAMvD,SAClB,oCAAYuD,EAAM/C,SAClB,0CAAkB+C,EAAM9C,eACxB,6CAAqB8C,EAAM7C","sources":["webpack://cloudf/./src/components/Modal/Modal.module.scss?b72d","components/Modal/Modal.tsx","webpack://cloudf/./src/components/Table/Table.module.scss?f22e","components/Table/Table.tsx","webpack://cloudf/./src/components/Tabs/Tabs.module.scss?dacb","components/Tabs/Tabs.tsx","components/Tabs/TabsPanel.tsx","components/Tabs/TabsPanels.tsx","routes/Quotes/assets.ts","stores/QuotesStore/Quotes.service.ts","stores/QuotesStore/QuotesStore.ts","webpack://cloudf/./src/routes/Quotes/Quotes.module.scss?798e","routes/Quotes/Quotes.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Modal_wrapper__BE2UA\",\"content\":\"Modal_content__yBmFf\"};","import React, {MouseEvent, ReactNode} from 'react'\nimport classes from './Modal.module.scss'\nimport ReactDOM from 'react-dom'\nimport {useEffect} from 'react'\nimport {useRef} from 'react'\nimport {observer} from 'mobx-react-lite'\n\ntype Props = {\n  children: ReactNode\n  isOpen: boolean\n  closeHandler: () => void\n}\n\nconst Modal: React.FC<Props> = observer(({children, isOpen, closeHandler}) => {\n  const $el: HTMLElement = document.createElement('div')\n  const ref = useRef(null)\n\n  const onClose = (e: MouseEvent<HTMLDivElement>) => {\n    if (e.target !== ref.current) {\n      closeHandler()\n    }\n  }\n\n  useEffect(() => {\n    document.body?.append($el)\n    return () => {\n      document.body?.removeChild($el)\n    }\n  }, [$el])\n\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden'\n    } else {\n      document.body.style.overflow = 'auto'\n    }\n  }, [isOpen])\n\n  return (\n    <>\n      {isOpen &&\n        ReactDOM.createPortal(\n          <div className={classes.wrapper} onClick={onClose}>\n            <div ref={ref} className={classes.content}>\n              {children}\n            </div>\n          </div>,\n          $el,\n        )}\n    </>\n  )\n})\n\nexport default Modal\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Table_header__rwKnO\",\"table\":\"Table_table__YUzYe\",\"table_header\":\"Table_table_header__pZOwQ\",\"cell\":\"Table_cell__tvGj6\",\"row\":\"Table_row__vg-qa\",\"procentN\":\"Table_procentN__-aaAV\",\"procentP\":\"Table_procentP__G9a0R\"};","import {observer} from 'mobx-react-lite'\nimport React from 'react'\n\nimport classes from './Table.module.scss'\n\ntype ColumnsType = {\n  title: string\n  key: string\n  dataKey: string\n}\n\ntype Props = {\n  columns: ColumnsType[]\n  rows: {[key: string]: string | number | JSX.Element}[]\n  header?: string\n  rowsHandler: (id: number) => void\n}\nconst Table: React.FC<Props> = observer(\n  ({columns, rows, header, rowsHandler}) => {\n    return (\n      <>\n        {header && <div className={classes.header}>{header}</div>}\n        <div className={classes.table}>\n          <div className={classes.table_header}>\n            {columns.map(column => (\n              <div key={column.key} className={classes.cell}>\n                {column.title}\n              </div>\n            ))}\n          </div>\n          {rows.map((el, i) => {\n            return (\n              <div\n                className={classes.row}\n                key={el.id as number}\n                onClick={() => {\n                  rowsHandler(el.id as number)\n                }}\n              >\n                {columns.map(column => (\n                  <div key={column.key} className={classes.cell}>\n                    {rows[i][column.dataKey]}\n                  </div>\n                ))}\n              </div>\n            )\n          })}\n        </div>\n      </>\n    )\n  },\n)\n\nexport default Table\n","// extracted by mini-css-extract-plugin\nexport default {\"tabs\":\"Tabs_tabs__1kRTM\",\"tab\":\"Tabs_tab__X52T4\",\"active\":\"Tabs_active__uGUKx\"};","import React, {memo} from 'react'\n\nimport classes from './Tabs.module.scss'\n\nexport type TabsType = {\n  id: string | number\n  name: string\n}\n\ntype Props = {\n  onChange: (id: string | number) => void\n  tabs: TabsType[]\n  tabValue: string | number\n}\nconst Tabs: React.FC<Props> = memo(({onChange, tabs, tabValue}) => {\n  return (\n    <div className={classes.tabs}>\n      {tabs.map(tab => (\n        <div\n          key={tab.id}\n          className={`${classes.tab} ${\n            tabValue === tab.id ? classes.active : ''\n          }`}\n          onClick={tabValue !== tab.id ? () => onChange(tab.id) : () => {}}\n        >\n          {tab.name}\n        </div>\n      ))}\n    </div>\n  )\n})\n\nexport default Tabs\n","import {ReactNode} from 'react'\n\ntype Props = {\n  children: ReactNode\n  value: string | number\n  valueTabs?: string | number\n}\nconst TabsPanel: React.FC<Props> = ({children, value, valueTabs}) => {\n  return <>{valueTabs === value && children}</>\n}\nexport default TabsPanel\n","import React, {JSXElementConstructor, memo, ReactElement} from 'react'\n\ntype TabsPanelsProps = {\n  children:\n    | ReactElement<any, string | JSXElementConstructor<any>>[]\n    | ReactElement<any, string | JSXElementConstructor<any>>\n  value: string | number\n}\nconst TabsPanels: React.FC<TabsPanelsProps> = memo(({children, value}) => {\n  const upChild = React.Children.map(children, child => {\n    return React.cloneElement(child, {valueTabs: value})\n  })\n  return <>{upChild}</>\n})\nexport default TabsPanels\n","export const tabsObj = [\n  {id: 'А', name: 'Котировки А'},\n  {id: 'Б', name: 'Котировки Б'},\n]\nexport const columnsData = [\n  {\n    title: 'name',\n    key: '1',\n    dataKey: 'name',\n  },\n  {\n    title: 'last',\n    key: '2',\n    dataKey: 'last',\n  },\n  {\n    title: 'Highest Bid',\n    key: '3',\n    dataKey: 'highestBid',\n  },\n  {\n    title: 'percent change',\n    key: '4',\n    dataKey: 'percentChange',\n  },\n]\ntype CreateDataType = (\n  id: number,\n  name: string,\n  last: string,\n  highestBid: string,\n  percentChange: string,\n) => {[key: string]: string | number}\n\nconst createData: CreateDataType = (\n  id,\n  name,\n  last,\n  highestBid,\n  percentChange,\n) => ({\n  id,\n  name,\n  last,\n  highestBid,\n  percentChange,\n})\n\nexport default createData\n","import IModelQuote from 'models/modelQuote'\nimport axios from 'axios'\n\nconst QuotesStoreService = {\n  async getQuotes(): Promise<IModelQuote> {\n    const response = await axios.get(\n      'https://poloniex.com/public?command=returnTicker',\n    )\n    return response.data\n  },\n}\n\nexport default QuotesStoreService\n","import {action, computed, makeObservable, observable} from 'mobx'\nimport IModelQuotes from 'models/modelQuote'\nimport createData from 'routes/Quotes/assets'\nimport QuotesStoreService from './Quotes.service'\n\nclass QuotesStore {\n  constructor() {\n    makeObservable(this, {\n      isLoading: observable,\n      quotesData: observable,\n      currentQuoteId: observable,\n      quotes: computed,\n      rows: computed,\n      currentQuote: computed,\n      setLoading: action,\n      setCurrentQuoteId: action,\n      fetchQuotes: action,\n    })\n  }\n  isLoading = false\n\n  currentQuoteId = 0\n\n  quotesData: IModelQuotes = {}\n\n  get quotes() {\n    return this.quotesData\n  }\n  get quoteId() {\n    return this.currentQuoteId\n  }\n\n  get rows() {\n    return Object.keys(this.quotes).map(key => {\n      const currentQuote = this.quotes[key]\n      return createData(\n        currentQuote.id,\n        key,\n        currentQuote.last,\n        currentQuote.highestBid,\n        currentQuote.percentChange,\n      )\n    })\n  }\n\n  get currentQuote() {\n    return this.rows.find(row => row.id === this.quoteId)\n  }\n\n  get quoteA() {\n    return this.rows.slice(0, -Math.floor(this.rows.length / 2))\n  }\n  get quoteB() {\n    return this.rows.slice(Math.floor(this.rows.length / 2))\n  }\n\n  setCurrentQuoteId = (id: number) => {\n    this.currentQuoteId = id\n  }\n\n  setLoading = (value: boolean) => {\n    this.isLoading = value\n  }\n\n  fetchQuotes = async (): Promise<void> => {\n    const res = await QuotesStoreService.getQuotes()\n    this.quotesData = res\n  }\n}\n\nexport default new QuotesStore()\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Quotes_wrapper__ki+AV\"};","import Container from 'components/common/Container'\nimport Loader from 'components/common/Loader'\nimport Modal from 'components/Modal'\nimport Table from 'components/Table'\nimport Tabs, {TabsPanel, TabsPanels} from 'components/Tabs'\nimport {observer} from 'mobx-react-lite'\nimport React, {useMemo, useRef, useState} from 'react'\nimport {useCallback} from 'react'\nimport {useEffect} from 'react'\nimport QuotesStore from 'stores/QuotesStore'\nimport {columnsData, tabsObj} from './assets'\n\nimport classes from './Quotes.module.scss'\n\nconst Quotes: React.FC = observer(() => {\n  const [tabValue, setTabValue] = useState<string | number>('А')\n  const {\n    setLoading,\n    fetchQuotes,\n    setCurrentQuoteId,\n    rows,\n    currentQuote,\n    quoteA,\n    quoteB,\n  } = QuotesStore\n\n  const [isOpenModal, openModalHandler] = useState(false)\n\n  const intervalId = useRef<NodeJS.Timeout>()\n  const firstLoad = useRef(true)\n  useEffect(() => {\n    if (firstLoad.current) {\n      fetchQuotes()\n      firstLoad.current = false\n    }\n    if (!isOpenModal) {\n      intervalId.current = setInterval(fetchQuotes, 3000)\n    } else {\n      clearInterval(intervalId.current as NodeJS.Timeout)\n    }\n    return () => {\n      clearInterval(intervalId.current as NodeJS.Timeout)\n    }\n  }, [isOpenModal, setLoading, fetchQuotes])\n\n  const modalHandler = useCallback(\n    (id: number) => {\n      openModalHandler(true)\n      setCurrentQuoteId(id)\n    },\n    [setCurrentQuoteId],\n  )\n\n  return (\n    <Container>\n      <Modal isOpen={isOpenModal} closeHandler={() => openModalHandler(false)}>\n        <ModalQuote quote={currentQuote} />\n      </Modal>\n      <Tabs onChange={setTabValue} tabs={tabsObj} tabValue={tabValue} />\n      <div className={classes.wrapper}>\n        {!rows.length ? (\n          <Loader />\n        ) : (\n          <TabsPanels value={tabValue}>\n            <TabsPanel value='А'>\n              <Table\n                columns={columnsData}\n                rows={quoteA}\n                rowsHandler={modalHandler}\n                header={`Котировки < ${tabValue} >`}\n              />\n            </TabsPanel>\n            <TabsPanel value='Б'>\n              <Table\n                columns={columnsData}\n                rows={quoteB}\n                header={`Котировки < ${tabValue} >`}\n                rowsHandler={modalHandler}\n              />\n            </TabsPanel>\n          </TabsPanels>\n        )}\n      </div>\n    </Container>\n  )\n})\n\nexport default Quotes\n\ntype PropsModal = {\n  quote: any\n}\nconst ModalQuote: React.FC<PropsModal> = ({quote}) => {\n  return (\n    <div>\n      <div>id: {quote.id}</div>\n      <div>name: {quote.name}</div>\n      <div>last: {quote.last}</div>\n      <div>highestBid: {quote.highestBid}</div>\n      <div>percentChange: {quote.percentChange}</div>\n    </div>\n  )\n}\n"],"names":["observer","children","isOpen","closeHandler","$el","document","createElement","ref","useRef","useEffect","body","append","removeChild","style","overflow","ReactDOM","className","classes","onClick","e","target","current","columns","rows","header","rowsHandler","map","column","title","key","el","i","id","dataKey","memo","onChange","tabs","tabValue","tab","name","value","valueTabs","upChild","React","child","tabsObj","columnsData","last","highestBid","percentChange","getQuotes","axios","response","data","QuotesStore","isLoading","currentQuoteId","quotesData","setCurrentQuoteId","setLoading","fetchQuotes","QuotesStoreService","res","makeObservable","this","observable","quotes","computed","currentQuote","action","Object","keys","createData","find","row","quoteId","slice","Math","floor","length","useState","setTabValue","quoteA","quoteB","isOpenModal","openModalHandler","intervalId","firstLoad","clearInterval","setInterval","modalHandler","useCallback","Container","ModalQuote","quote","Loader"],"sourceRoot":""}